generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  passwordHash  String
  image         String?
  createdAt     DateTime  @default(now())
  friends       Friend[]  @relation("UserFriends")
  galleries     Gallery[]
  media         Media[]
  shares        Share[]   @relation("UserShares")
  accounts      Account[]
  sessions      Session[]
}

model Friend {
  id        String @id @default(cuid())
  userId    String
  friendId  String
  user      User   @relation("UserFriends", fields: [userId], references: [id])
}

model Gallery {
  id        String   @id @default(cuid())
  name      String
  ownerId   String
  owner     User     @relation(fields: [ownerId], references: [id])
  media     Media[]
}

model Media {
  id         String   @id @default(cuid())
  url        String
  type       String
  uploaderId String
  galleryId  String
  uploader   User     @relation(fields: [uploaderId], references: [id])
  gallery    Gallery  @relation(fields: [galleryId], references: [id])
  shares     Share[]
  createdAt  DateTime @default(now())
}

model Share {
  id          String @id @default(cuid())
  mediaId     String
  senderId    String
  recipientId String
  media       Media  @relation(fields: [mediaId], references: [id])
  sender      User   @relation("UserShares", fields: [senderId], references: [id])
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
